// Load the Gulp.js package
var gulp = require("gulp"),

    // Load the JSHint, Connect, Clean, Jasmine, Istanbul, Concat, Uglify, YUIDoc, Rename and
    // Header plugin tasks
    jshint = require("gulp-jshint"),
    connect = require("gulp-connect"),
    clean = require("gulp-clean"),
    jasmine = require("gulp-jasmine"),
    istanbul = require("gulp-istanbul"),
    concat = require("gulp-concat"),
    uglify = require("gulp-uglify"),
    yuidoc = require("gulp-yuidoc"),
    rename = require("gulp-rename"),

    // The Header task adds a given string of text to the top of a file, useful for adding
    // dynamic comments at the start of a file
    header = require("gulp-header"),

    // Load the properties from the package.json file into a variable for use in task
    // configuration
    pkg = require("./package.json"),

    // Define variables to represent the folder and file locations required for task
    // configuration - saves repetition

    // The "src/" folder contains the code we will work on during development, including
    // "scripts/" and "tests/" folders containing our JavaScript code and Jasmine test spec
    // scripts, respectively
    srcFolder = "src/",
    scriptFolder = srcFolder + "scripts/",
    scriptFiles = scriptFolder + "**/*.js",
    unitTestFolder = srcFolder + "tests/",
    unitTestFiles = unitTestFolder + "**/*.js",

    // The "dist/" folder will be generated automatically by this Gruntfile when run, and
    // populated with the release version of our application files
    outputFolder = "dist/",
    outputScriptFolder = outputFolder + "scripts/",

    // Define the name and location of a single script file into which all others will
    // be concatenated into, becoming the main JavaScript file of our application
    outputScriptFileName = "main.js",
    outputScriptFile = outputScriptFolder + outputScriptFileName,

    // Define the file suffix to apply to the minified version of our single application script
    outputScriptFileMinifiedSuffix = ".min",

    // Define output folders for generated Istanbul reports and YUIDoc documentation files
    outputReportFolder = outputFolder + "report/",
    outputDocsFolder = outputFolder + "docs/";

// Configure Connect as in Listing 15-5
gulp.task("connect", function() {
    "use strict";

    connect.server({
        port: 3000,
        livereload: true
    });
});

// Configure JSHint as in Listing 15-5
gulp.task("jshint", function() {
    "use strict";

    return gulp.src(scriptFiles)
        .pipe(jshint({
            strict: true
        }))
        .pipe(jshint.reporter("default"))
        .pipe(connect.reload());
});

// Configure a Watch task as in Listing 15-5
gulp.task("watch", function() {
    "use strict";

    gulp.watch(scriptFiles, ["jshint"]);
});

// Define a Clean task to empty the contents of the "dist/" output folder each time we prepare
// our production-ready release code
gulp.task("clean", function() {
    "use strict";

    return gulp.src(outputFolder, {

            // Setting the "read" option to false with gulp.src() causes Gulp.js to ignore the
            // contents of the input files, resulting in a faster task
            read: false
        })

        // Pipe the output folder through the clean() task method, erasing it from the file
        // system
        .pipe(clean());
});

// Define a Copy task to duplicate static files that we wish to bundle with our release code
// into our output "dist/" folder
gulp.task("copy", function() {
    "use strict";

    // Copy all files witin "src/", except those in the "scripts/" and "tests/" folders, over
    // to the "dist/" output folder. There is no need for a special plugin to perform file
    // copying, it is handled directly through the Gulp.js API methods src() and dest()
    return gulp.src(["**", "!scripts/**", "!tests/**"], {
            cwd: srcFolder
        })
        .pipe(gulp.dest(outputFolder));
});

// Define a task to perform unit testing through Jasmine and code coverage report generation
// via Istanbul. To save running two tasks, which will effectively end up running the unit
// tests twice, we combine the two together into one task
gulp.task("jasmine-istanbul", function() {
    "use strict";

    // Pipe the files from the "src/scripts/" directory into Istanbul, which "instruments" the
    // files, ensuring that code coverage reports can be generated later. No files are actually
    // saved to the file system, they are kept in memory while they are being used, and are
    // then destroyed when the task is complete
    return gulp.src(scriptFiles)
        .pipe(istanbul())

        // When the script files have been instrumented, execute Jasmine against the unit
        // test specs, piping the code coverage reports generated by Istanbul when these tests
        // are run into the "dist/reports" folder
        .on("finish", function() {

            // Run the unit test files through Jasmine. Due to the nature of the gulp-jasmine
            // plugin, the unit test files must be Node.js application files, meaning that
            // before the tests can be run, we need to include a line at the top of the test
            // script to require() the original script file we are testing - this means that
            // the script file we're testing needs to have a "module.exports = " line to
            // expose the functions to test for the unit test script. A few extra hoops to jump
            // through compared to when testing with Grunt, however it's not too unfamiliar
            // territory!
            gulp.src(unitTestFiles)
                .pipe(jasmine())

                // Create the Istanbul code coverage reports now the unit tests have been run
                // against the instrumented code
                .pipe(istanbul.writeReports({
                    dir: outputReportFolder,
                    reporters: ['lcov'],
                    reportOpts: {
                        dir: outputReportFolder
                    }
                }));
        });
});

// Define a Concat task to combine the files in the "src/scripts/" folder into a single
// JavaScript application file
gulp.task("concat", function() {
    "use strict";

    return gulp.src(scriptFiles)

        // Pass the name of the new script file to create to the concat() function
        .pipe(concat(outputScriptFileName))

        // Place the new file into the "dist/scripts/" output folder
        .pipe(gulp.dest(outputScriptFolder));
});

// Define an Uglify task to minify the contents of our concatenated JavaScript file to reduce
// its size without removing its functionality, before adding a header comment to the minified
// file, renaming it to add a ".min" suffix to the resulting file, and then placing the new
// file in the "dist/scripts/" output folder
gulp.task("uglify", function() {
    "use strict";

    // Run the "dist/scripts/main.js" file through the uglify() task method to produce a
    // minified version of that file
    return gulp.src(outputScriptFile)
        .pipe(uglify())

        // Add a comment header to the minified JavaScript file, including the name and
        // version details from the package.json file
        .pipe(header("/*! " + pkg.name + " - version " + pkg.version + " */\n"))

        // Rename the minified file to add the ".min" suffix, the resulting file name will
        // then be "main.min.js"
        .pipe(rename({suffix: outputScriptFileMinifiedSuffix}))

        // Place the minified file into the "dist/scripts/" output folder
        .pipe(gulp.dest(outputScriptFolder));
});

// Define a YUIDoc task to generate a separate static web site derived from specially formatted
// comments placed in our JavaScript files, allowing new developers to get up to speed with the
// structure of the project code without needing to comb through each line of code
gulp.task("yuidoc", function() {
    "use strict";

    // Load the JavaScript files from the "src/scripts/" folder and run these through YUIDoc,
    // passing in the name and version number of the project from the package.json file to
    // include in the resulting static documentation web site
    return gulp.src(scriptFiles)
        .pipe(yuidoc({
            project: {
                "name": pkg.name,
                "version": pkg.version
            }
        }))

        // Place the resulting static web site files in the "dist/docs/" output folder
        .pipe(gulp.dest(outputDocsFolder));
});

// Define a default task to run JSHint, Connect and Watch, for local development
gulp.task("default", ["jshint", "connect", "watch"]);

// Define a new "build" task to empty the "dist/" folder, copy over site files, run JSHint
// and Jasmine to check code quality, generating code coverage reports with Istanbul,
// concatenate the JavaScript files into a single application file, minify the contents of that
// file, and finally generate a documentation site based on the YUIDoc-formatted code comments
// in the original JavaScript files
gulp.task("build", ["clean", "copy", "jshint", "jasmine-istanbul", "concat", "uglify", "yuidoc"]);